asr-config {
	# AUDIO LOGS
	# 
	# to capture audio logs, utterences issued during a speech session, initiate a recognition session with the "audio_log_dir" 
	# modifier set.
	# ex. echo strobe::on?audio_log_dir = <dir> >>/pps/services/asr
	# each utterence recorded during the speech session will be logged to the specified directory
	# 
	# to recognize against previously captured audio logs, initiate a recognition session with the audio_source_dir modifier
	# echo "strobe::on?audio_source_dir = <dir>" >>/pps/services/asr
	# if audio_source_dir is set the previously captured audio will be used, one file per recognition attempt, 
	# till the recognition session ends. 

	# PROMPT LOGS
	#
	# to capture the audio generated from in session tts prompts, set the prompt-log-dir propterty to the desired location for the logs
	# the promps will be stored in .wav format. Usefull for converting tts prompts to canned .wav prompts to avoid tts audio gen latencies.
	# all prompts for all sessions are logged to the same dir with incrementing id's.
	# prompt-log-dir = /tmp/prompt_logs
	
	locale = en-US
	base-dir = /opt/asr
	conv-dir = $(base-dir)/conversation
	prompt-dir = $(base-dir)/prompt
	rec-dir = $(base-dir)/recognition
	help-dir   = $(conv-dir)/\$(locale)/help
	sounds-dir = $(conv-dir)/sounds
	vocon-dir = /var/vocon/\$(locale)
	app-sounds = /usr/share/sounds/voice_app_sounds
	localized-sounds-dir = $(conv-dir)/\$(locale)/sounds
	
	# transient-ui... 1 == hide voice ui on session end, 0 == leave voice ui open
	transient-ui = 0

	# global verbosity setting, can be overridden in config sections
	verbosity = 3

	# Volume of recognizer prompts (0 - 100)
	prompt-volume = 100

	# speech session salutation preference:
	# if set to 0 the asr salutation of "please say a command after the beep" will play at the beginning of every speech session
	# if set to non-0 the asr salutation will be played only at the activation of the first speech session.
	# from that point on only the beep will sound to indicate the speech system is listening for a command. There will be no session salutation.
	one-time-salutation = 1

	# To disable audio ducking while ASR is listening, set this configuration item to 0.
	duck-audio-while-listening = 1

	# Results with a confidence less than this threshold are discarded
	# Can be overridden within the recognition sections below
	# range from 0 to 1000
	confidence-threshold = 600

	# Auto-help will play all the active modules' help messages if the user provides unrecognized commands the specified number of times consecutively
	# 0 == disabled, 1 = auto help after the first unrecognized command, 2 = auto help after second consecutive unrecognized command
	auto-help = 0
	app-context = default

	# language model hint. The recognition module will use this hint to set recognition context.
	# free-form := free form speech recognition
	# intent    := general intent recognition
	# search    := optimized for search engines 
	language-model-hint = intent

	help {
		app-to-section-mapping {
			# section help to play first is determined by the "app-context" attribute
			qnx.phone = phone
			qnx.mediaAudioPlayer = mmedia
			qnx.localSearch = bing-local
			default = phone
		}
	}

	unrecognized {
	}

	canceled{
	}

	vlingo-services {
		client-software-name = QNXCAR2
		client-software-version = 1.0
		mac-address = /var/etc/system/config/random-mac.conf
		app-id = com.vlingo.client.proto
		protocol-version = 3.0
		sr {
			vlingo-voice-service-version = 1.0
			service-url = http://prototype.vlingo.com:80/voicepad/sr
			language = en-US
		}
		tts {
			tts-version  = 1.0
			service-url  = http://prototype.vlingo.com:80/tts/tts2
			voice-gender = Male
			audio-format = PCM
			#prompt-log-dir = /tmp/asr-prompt
			language = en-US
			# speech-rate values... [VerySlow|Slow|Normal|Fast|VeryFast]
			speech-rate  = Normal
			priority = 11
		}
	}

	tts {
		install = /opt/tts/nuance/Data

		voices {
			en-US = Samantha
			pt-BR = Raquel
			en-GB = Serena
			fr-CA = Julie
			zh-CN = Ting Ting
			nl-NL = Claire
			fr-FR = Virginie
			de-DE = Anna
			it-IT = Silvia
#			ja-JP = Kyoko
#			ko-KR = Narae
			es-MX = Paulina
			nb-NO = Stine
			pl-PL = Agata
			pt-PT = Joana
			ru-RU = Milena
			es-ES = Monica
			zh-TW = Ting Ting			
		}
		
		languages {
			en-US = American English
			pt-BR = Brazilian Portuguese
			en-GB = British English
			fr-CA = Canadian French
			zh-CN = Chinese Mandarin
			nl-NL = Dutch
			fr-FR = French
			de-DE = German
			it-IT = Italian
#			ja-JP = Japanese
#			ko-KR = Korean
			es-MX = Mexican Spanish
			nb-NO = Norwegian
			pl-PL = Polish
			pt-PT = Portuguese
			ru-RU = Russian
			es-ES = Spanish
			zh-TW = Chinese Mandarin			
		}
	}

	audio {
		capture {
			verbosity   =  2
			priority    = 25
			card        = -1
			dev         =  0
			sample-rate =  8000
			sample-size =  16
			volume      =  100
			channels    =  1
			frag-size   =  2048
			# frag should be filled in about 100ms
			wav-header = "enabled"
                        # "disbaled"
			max-utterance-secs = 8
			silence-detection {
				silence-threshold = 90
				min-voice-duration = 0.1
				eos-detection = "enabled"
				#eos-detection = "disabled"
				eos-max-silence-ms = 500
				voice-portion = 0.9
				min-voice-level = 55.0
				bos-detection = "disabled"
				bos-max-silence-ms = 2000
			}
		}
		file {
			# dir all relative paths are resolved from
			audio_root = /var/audio/logs
		}
	}

	load-modules {
		# media and search conversation, capture audio, and
		# vlingo recognition modules are all linked statically
		# as are wav_file, offboard_tts, and
		# visual_interactive
		dlldir = /lib/dll/asr

		# load an initiator... supports pps/services/asr/control
		dll = $(dlldir)/asr-car-hmi-prompt.so
		#dll = $(dlldir)/asr-initiator-conversation.so
		
		# add some prompt capability
		dll = $(dlldir)/asr-wav_file-prompt.so
		dll = $(dlldir)/asr-offboard_tts-prompt.so
		#dll = $(dlldir)/asr-nuance_tts-prompt.so

		# add a recognizer
		#dll = $(dlldir)/asr-vlingo-recognition.so
		dll = $(dlldir)/asr-vocon3200-recognition.so

		# add audio capture from mic etc
		dll = $(dlldir)/asr-capture-audio.so

		# add audio capture to/from file
		dll = $(dlldir)/asr-file-audio.so

		# add module that prompts based on recognition step (salutation, audio cap beep, session end tone, etc.)
		dll = $(dlldir)/asr-step-conversation.so

		# add module that performs actions based on recognition results
		dll = $(dlldir)/asr-search-conversation.so

		# add module to dump results to slog
		dll = $(dlldir)/asr-dump-conversation.so

		# add module to perform voice activated dialing.
		dll = $(dlldir)/asr-dialer-conversation.so

		# add module to control media playback and perform
		# media queries using the mm-control back-end.
		#dll = $(dlldir)/asr-mm-control-car-media-conversation.so

		# add module to control media playback and perform
		# media queries using the mm-player back-end.
		dll = $(dlldir)/asr-mm-player-car-media-conversation.so
	}

	## Module sections
	module {
		locale-dir = $(conv-dir)/\$(locale)
		prompt-locale-dir = $(prompt-dir)/\$(locale)
		rec-locale-dir = $(rec-dir)/\$(locale)
		common {
			recognizer = vocon3200 {
				context = $(locale-dir)/common/car-common.fcf
				grammar = common
			}
			localization-assets {
				$(locale-dir)/common/car-control.cfg
			}
			localized{
			}
		}

		vocon3200 {
			vocon-data = /opt/vocon
			application-version = 1.0

			# Specifies the confidence threshold at which
			# in-grammar results will be considered to
			# have high confidence. This must be a value
			# between 0-10000.
			confidence-threshold = 5000

			# Set the recognition mode to one of: local,
			# remote, hybrid. For remote and hybrid modes,
			# an application-id and application-key must
			# be specified.
			recognition-mode = hybrid

			# The application-id and application key are
			# provided by Nuance.
			application-id = set-app-id
			application-key = set-app-key

			# The following configurations can be adjusted
			# to suit the application. The default values
			# are shown (i.e. the values that will be used
			# if these configuration items are omitted).
			carrier = wifi
			command-timeout = 8000
			connection-parameters {
				host = sandbox.nmdp.nuancemobility.net
				port = 443
			}

			localization-assets {
				$(prompt-locale-dir)/vocon3200/car-prompts.cfg
			}
			localized {
			}
		}

		search {
			language-model-hint = free-form
			# items with paths to resources continue to use language variable.
			nav-provider = ebnav
			weather-app = LocalSearch
			map-app = LocalSearch

			recognizer = vocon3200 {
				context = $(locale-dir)/search/car-search.fcf
				grammar = search
				slots {
					application {
						context = $(vocon-dir)/search/car-applications.lcf
					}
					search-term {
						# Used to construct
						# the JSON query
						# params object to
						# configured the
						# tagged query.
						command-timeout = 8000
						dictation-type = Dictation
					}
					media-name {
						context = $(vocon-dir)/car-media/car-media-data.lcf
					}
				}
			}

			localization-assets {
				$(locale-dir)/search/car-control.cfg
				$(locale-dir)/search/car-prompts.cfg
			}
			localized {
				# filled with search assets specified by localization assets above
			}
		}

		step {
			audio-prompts {
				pre-audio-beep = file://$(sounds-dir)/beep.wav
				session-closed = file://$(sounds-dir)/session_end.wav
				error = file://$(sounds-dir)/error.wav
			}
			protected-mixer-groups {
				Master
				Headphone
				Input Gain
				Line
				Line In
				Mic In
				PCM
				PCM In
				MultiMedia
				PCM Mixer
				Tones
				Voice
			}
			localization-assets {
				$(locale-dir)/step/car-prompts.cfg
			}
			localized {
				# filled with search assets specified by localization assets above
			}
		}

		dialer {
			# The following confidence threshold is used
			# when matching spoken utterances to contact
			# names. If the contact database has a lot of
			# entries, the confidence threshold should be
			# set higher to reduce the number of matches
			# obtained.
			confidence-threshold = 850

			recognizer = vocon3200 {
				context = $(locale-dir)/dialer/car-dialer.fcf
				grammar = dialer
				slots {
					contact-name {
						context = $(vocon-dir)/dialer/car-contacts.lcf
					}
				}
			}

			localization-assets {
				$(locale-dir)/dialer/car-control.cfg
				$(locale-dir)/dialer/car-prompts.cfg
			}
			localized {
				# filled with dialer assets specified
				# in the localisation-assets section.
			}
		}

		car-media {
			# The following confidence threshold is used
			# when matching speech-to-text results with
			# media data. Matches must exceed this
			# confidence to be considered by the car-media
			# module.
			confidence-threshold = 850

			recognizer = vocon3200 {
				context = $(locale-dir)/car-media/car-media.fcf
				grammar = car-media
				slots {
					media-name {
						context = $(vocon-dir)/car-media/car-media-data.lcf
					}
				}
			}

			# Localized assets including grammar
			# definitions.
			localization-assets {
				$(locale-dir)/car-media/car-control.cfg
				$(locale-dir)/car-media/car-prompts.cfg
			}
			localized {
				# Filled with car-media assets
				# specified in the localisation-assets
				# section.
			}
		}
	}
}
