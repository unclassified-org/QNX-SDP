## Search module: en-US control sections

################################################################################
# General language rules.
################################################################################

article {
	( a[n] | the )
}

pronoun {
	( I | you | [s]he | they | we )
}

preposition {
	( of | on | to | in | about | for | with | until | from ) 
}

capable {
	(could | can | can | will | would) ' '
}

civility-modifier {
	[( <capable> | if ) you][[' ']please]
}

is-spec {
	(it|is) [' ' (it|is)]
}

what-spec {
	what[s | \'s | ' is' | ' are']
}

acquire-spec {
	[<civility-modifier>' '] ([check] <what-spec> | get | (give | tell | show) ' me' ) ' ' [<article>' ']
}

inquiry-spec {
	[<civility-modifier>' '] 'I ' ( 'need to' | must | 'have to' ) ' ' ( know | find | get ) ' ' [<article>' ']
}

proximity-modifier {
	[<article>' '] near[(by|est)]
}

################################################################################
# Time query rules
################################################################################

time-query {
	[<acquire-spec>] ['current '] (time|hour) [' ' <is-spec>] [' 'now] [' 'please]
}

date-query {
	[<acquire-spec>] [( current | today[s|\'s] )' '] (day|date) [' ' <is-spec>] [' 'today] [' 'please]
}

################################################################################
# Launcher command rules
################################################################################

app-cmd {
	# Launching the radio, audio, or video applications require
	# specialized processing. For this reason, they warrant their
	# own grammar rules.
	[<civility-modifier>' '] <launch-cmd> [<application-info-preamble>] (' radio':id(rule, launch-radio))
	[<civility-modifier>' '] <launch-cmd> [<application-info-preamble>] (' audio':id(rule, launch-audio)) [' player']
	[<civility-modifier>' '] <launch-cmd> [<application-info-preamble>] (' video':id(rule, launch-video)) [' player']
	[<civility-modifier>' '] <launch-cmd:id(rule, launch)> [<application-info-preamble>] [' ']<...:id(application)> [' application']
	[<civility-modifier>' '] <close-cmd:id(rule, terminate)> [<application-info-preamble>] [' ']<...:id(application)> [' application']
}

close-cmd {
	( close | terminate | kill )
}

launch-cmd {
	( open | 'switch to' | 'go to' | launch )
}

application-info-preamble {
	' ' ( the | my ) [ ' ' app[lication] ]
}

launch = NLAL {
	(video:id(rule, launch-video)) [' player']
	(audio:id(rule, launch-audio)) [' player']
	(radio:id(rule, launch-radio))
	(:id(rule, launch)) <...:id(application)> [' application']
	help-url = tts://$(launch-which-app)
}

terminate = NLAL {
	(:id(rule, terminate)) <...:id(application)> [' application']
}

################################################################################
# Weather query rules
################################################################################

location-info-preamble {
	( for | like | ['over ']in ) [' ' <location-info-preamble>]
}

conditions-spec {
	( weather | temperature | conditions [' 'are] ) [' '<location-info-preamble>]
}

query-weather {
	[(<acquire-spec> | <inquiry-spec>)] <conditions-spec> <...:id(location)>
}

weather = NLAL {
	(:id(rule, get-weather)) <...:id(location)>
	help-url = tts://$(weather-query)
}

################################################################################
# Navigation query rules
################################################################################

digit {
	( 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 )
}

number {
	<digit>[[' ']<number>]
}

nav-street-specific {
        # Major roads
        (highway|Hwy[.]:id(street-specific, Hwy))
        (freeway|Fwy[.]:id(street-specific, Fwy))
        (motorway:id(street-specific))
        (expressway:id(street-specific))
        (avenue|Ave[.]:id(street-specific, Ave))
        (boulevard|Blvd[.]:id(street-specific, Blvd))
        (road|Rd[.]:id(street-specific, Rd))
        (street|St[.]:id(street-specific, St))

        # Small roads
        (alley:id(street-specific))
        (bay:id(street-specific))
        (bend:id(street-specific))
        (drive:id(street-specific, Dr))
        (gardens:id(street-specific))
        (gate:id(street-specific))
        (grove:id(street-specific))
        (heights:id(street-specific))
        (highlands:id(street-specific))
        (knoll:id(street-specific))
        (lane:id(street-specific, Ln))
        (manor:id(street-specific))
        (mews:id(street-specific))
        (pathway:id(street-specific))
        (private:id(street-specific, Pvt))
        (ridge:id(street-specific, Rdg))
        (terrace:id(street-specific, Ter))
        (trail:id(street-specific))
        (vale:id(street-specific))
        (view:id(street-specific, Vw))
        (walk:id(street-specific))
        (way:(id-specific, Wy))
        
        # Culs-de-sac
        (close:id(street-specific))
        (court|Crt[.]:id(street-specific, Crt))
        (place|Pl[.]:id(street-specific, Pl))
        (cove:id(street-specific))

        # Named for their shape
        (circle|Cir[.]:id(street-specific, Cir))
        (crescent|Cres[.]:id(street-specific, Cres))
        (quadrant:id(street-specific))
        (square:id(street-specific))
        (loop:id(street-specific))

        # Named for their function
        (esplanade:id(street-specific))
        (approach:id(street-specific))
        ('frontage road':id(street-specific))
        (parade:id(street-specific))
        (park:id(street-specific))
        (plaza:id(street-specific))
        (promenade:id(street-specific))
        (quay:id(street-specific))
        (bypass:id(street-specific))
        (stravenue:id(street-specific))
}

nav-street-cardinal-point {
        ((E|e)ast|E[.]:id(cardinal-point, E))
        ((W|w)est|W[.]:id(cardinal-point, W))
        ((N|n)orth|N[.]:id(cardinal-point, N))
        ((S|s)outh|S[.]:id(cardinal-point, S))
}

nav-street-quadrant {
        ((N|n)orth[' '](W|w)est|NW[.]:id(quadrant, NW))
        ((N|n)orth[' '](E|e)ast|NE[.]:id(quadrant, NE))
        ((S|s)outh[' '](W|w)est|NW[.]:id(quadrant, SW))
        ((S|s)outh[' '](E|e)ast|NE[.]:id(quadrant, SE))
}

nav-street {
        [<nav-street-cardinal-point:id(pre-cardinal)>' ']<...:id(street-name)>[' '<nav-street-specific>][' '<nav-street-cardinal-point:id(post-cardinal)>][' '<nav-street-quadrant>]
}

nav-address-string {
        <number:id(number)> ' ' <nav-street:id(street)>[','][' ']<...:id(place-region)>
}

nav-poi-search-cmd {
	[<civility-modifier>' '] ( find | locate ) [' '<proximity-modifier>]
	[<acquire-spec>] 'directions' [' to'] [' '<proximity-modifier>]
}

nav-request {
	<nav-poi-search-cmd:id(rule, find-poi)> <...:id(destination)>
	(navigate:id(rule, navigation)) [' to '<nav-address-string:id(address)>]
}

navigation = NLAL {
	(:id(rule, navigation)) <nav-address-string:id(address)>
	(:id(rule, find-poi)) <...:id(destination)>
	help-url = tts://Specify a point of interest, or an address that you would like to navigate to.
}

################################################################################
# Search query rules
################################################################################

tell-spec {
	<acquire-spec> (about|information) [' '<preposition>]
}

find-spec {
	I ('\'m' | ' am') ' interested' [' '<preposition>]
}

search-type-spec {
	' ' ( media | music | songs ) (:id(search-type, media))
	' ' [<article> ' '] ( bing | google | internet | web ) (:id(search-type, web))
}

search-spec {
	[<civility-modifier>' '] search [<search-type-spec>] [' for'] <...:id(search-term)>
}

find-query {
	( <tell-spec> | <find-spec> ) ' '<...:id(search-term)> (:id(search-type, web))
	<search-spec>
}

map = NLAL {
	(:id(rule, search)) <...:id(search-term)>
}

media = NLAL {
	(:id(rule, search-media)) <...:id(search-term)>
}

################################################################################
# Map query rules
################################################################################

show-map-query {
	[<acquire-spec>] map [' '<preposition>] <...:id(search-term)>
}

################################################################################
# Top-Level Rules
################################################################################

keys = NLAL {
	# Rule #1 (key = time): Query the time
	<time-query:id(rule, time)>
	# Rule #2 (key = date): Query the date
	<date-query:id(rule, date)>
	# Rule #3: Launch or close an application.
	<app-cmd>
	# Rule #4 (key = get-weather): Get the current weather in a specified location.
	<query-weather:id(rule, get-weather)>
	# Rule #5: Do a POI search to a nearby destination.
	<nav-request>
	# Rule #6 (key = search): Find information via a web search.
	<find-query:id(rule,search)>
	<show-map-query:id(rule, search)> (:id(search-type, map))
	help-url = tts://Via voice control, you can: Launch, or open, an application, Search the internet using Bing, Check the current date or time, play music by artist, album, or song title, Find nearby points of interest, lookup a specified address. What would you like to do?
}
