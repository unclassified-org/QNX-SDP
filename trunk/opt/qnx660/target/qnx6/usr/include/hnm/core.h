/* -*- Mode: C -*- */

/*
 * hnm/core.h - HNM core library declarations
 *
 * $QNXLicenseC:
 * Copyright 2013, QNX Software Systems. All Rights Reserved
 * 
 * This software is QNX Confidential Information subject to 
 * confidentiality restrictions. DISCLOSURE OF THIS SOFTWARE 
 * IS PROHIBITED UNLESS AUTHORIZED BY QNX SOFTWARE SYSTEMS IN 
 * WRITING.
 * 
 * You must obtain a written license from and pay applicable license 
 * fees to QNX Software Systems before you may reproduce, modify or 
 * distribute this software, or any work that includes all or part 
 * of this software. For more information visit 
 * http://licensing.qnx.com or email licensing@qnx.com.
 * 
 * This file may contain contributions from others.  Please review 
 * this entire file for other proprietary rights or license notices, 
 * as well as the QNX Development Suite License Guide at 
 * http://licensing.qnx.com/license-guide/ for other information.
 * $
 */
 
 /**
  * @file core.h
  *
  * @brief HNM core library declarations
  *
  * The core HNM library provides an interface to the host system's logging
  * facilities.
  */

#ifndef __HNM_CORE_H__
#define __HNM_CORE_H__

#include <sys/slogcodes.h>

/* [[file:~/mainline/services/hmi-notification/doc/hnm.org::*Logging%20and%20Debugging][hnm::log-PROTO]] */
/**
 * @brief Private helper function used to generate log messages
 *
 * NOTE: The @e #hnm_log() function is flagged "private" because using it directly
 * is discouraged. Instead, use the macros that follow its declaration,
 * which add debugging data when the @c DEBUG macro is defined. However, you may need to 
 * log at different verbosity levels for which macros haven't yet been defined, so this
 * function may be useful in such cases.
 *
 * The @e hnm_log() function sends debugging information with an
 * associated severity to the appropriate log. The log where the data
 * is actually sent is specified by the global variable @c log_stdout. 
 * If this variable is nonzero, output generated by this
 * function is printed to the system log.
 *
 * Log messages are written to the log buffer only if their
 * severity is less than or equal to the current verbosity setting.
 *
 * NOTE: If the severity of the log message is critical, the program
 * is aborted. If the severity of the log message is @c _SLOG_ERROR,
 * the program exits with a failure status.
 *
 * @param severity The severity of the condition that triggered the message. 
 * For more information on severity levels, see @e slogf() in the <em>QNX C Library Reference</em>.
 * Valid values include:
 * - @c _SLOG_INFO
 * - @c _SLOG_WARN
 * - @c _SLOG_ERROR
 * - @c _SLOG_CRITICAL
 *
 * @param fmt The format string to print to the log buffer. This may
 *      include tokens that to be replaced by values of variable
 *      arguments appended to the end of the call. The max length
 *      of an expanded log message is 1024 characters (this includes
 *      all format substitutions and the null terminator).
 *
 * @return Nothing.
 */
void hnm_log( int severity, const char* fmt, ... ) ;

#ifdef DEBUG
/** This macro implements a log function for debug information, including filenames and line numbers.*/
#define hnm_dbg( fmt, ... ) hnm_log( _SLOG_DEBUG1, "[%s:%5d] %s() -- " fmt, __FILE__, __LINE__, __PRETTY_FUNCTION__, ## __VA_ARGS__ )
/** This macro implements a log function for errors, including filenames and line numbers.*/
#define hnm_err( fmt, ... ) hnm_log( _SLOG_ERROR, "[%s:%5d] %s() -- " fmt, __FILE__, __LINE__, __PRETTY_FUNCTION__, ## __VA_ARGS__ )
/** This macro implements a log function for general information, including filenames and line numbers.*/
#define hnm_info( fmt, ... ) hnm_log( _SLOG_INFO, "[%s:%5d] %s() -- " fmt, __FILE__, __LINE__, __PRETTY_FUNCTION__, ## __VA_ARGS__ )
#else  /* !DEBUG */
/** This macro implements a log function for debug information. */
#define hnm_dbg( fmt, ... ) hnm_log( _SLOG_DEBUG1, fmt, ##__VA_ARGS__ )
/** This macro implements a log function for errors. */
#define hnm_err( fmt, ... ) hnm_log( _SLOG_ERROR, fmt, ##__VA_ARGS__ )
/** This macro implements a log function for general information. */
#define hnm_info( fmt, ... ) hnm_log( _SLOG_INFO, fmt, ##__VA_ARGS__ )
#endif /* !DEBUG */

/* hnm::log-PROTO ends here */
/* [[file:~/mainline/services/hmi-notification/doc/hnm.org::*Logging%20and%20Debugging][hnm::setLogBuffer-PROTO]] */
/**
 * @brief Enumeration of log buffer IDs
 * 
 * The @c HNM_LOG_SLOG and @c HNM_LOG_STDOUT flags specify the target buffer for logging.
 */
typedef enum hnm_log_buffer_id {
        HNM_LOG_SLOG = 0,	/**< Sets the system log as the target buffer. */
        HNM_LOG_STDOUT		/**< Sets the standard output stream as the target buffer. */
} hnm_LogBufferId ;

/**
 * @brief Specify the log buffer for the @e #hnm_log() function to use
 *
 * The @e hnm_set_log_buffer() function sets the internal flag that specifies 
 * the target logging buffer for the log data emitted by @e hnm_log().
 *
 * @param log_buffer The ID representing the log buffer that @e hnm_log() uses
 *                   for output.
 * @return Nothing.
 */
void hnm_set_log_buffer( hnm_LogBufferId log_buffer ) ;

/* hnm::setLogBuffer-PROTO ends here */
/* [[file:~/mainline/services/hmi-notification/doc/hnm.org::*Logging%20and%20Debugging][hnm::setLogVerbosity-PROTO]] */
/**
 * This literal specifies the default verbosity level used by the log function.
 */
#ifndef DEFAULT_VERBOSITY
#define DEFAULT_VERBOSITY _SLOG_ERROR
#endif  /* DEFAULT_VERBOSITY */

/**
 * @brief Set the verbosity level
 *
 * The @e hnm_setLogVerbosity() function sets the verbosity level for log output
 *      generated by the HNM.
 *
 * @param verbosity The verbosity level.
 *
 * @return Nothing.
 */
void hnm_setLogVerbosity( unsigned verbosity ) ;

/* hnm::setLogVerbosity-PROTO ends here */

#endif  /* __HNM_CORE_H__ */

#if defined(__QNXNTO__) && defined(__USESRCVERSION)
#include <sys/srcversion.h>
__SRCVERSION("$URL: http://svn/product/branches/6.6.0/trunk/services/hmi-notification/public/hnm/core.h $ $Rev: 730777 $")
#endif
