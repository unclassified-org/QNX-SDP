ifndef BUILDENV
BUILDENV := qss
endif

#
# The base directories for the installation trees.
#
INSTALL_ROOT_nto		:= $(QNX_TARGET)
INSTALL_ROOT_qnx4		:= /usr/qnx4
INSTALL_ROOT_win32		:= /usr/win32
INSTALL_ROOT_mingw32		:= /usr/mingw32
INSTALL_ROOT_solaris		:= /opt/QNXsdk/target/solaris

#
# The base directories for accessing headers/libraries for various OS's.
#
USE_ROOT_nto		:= $(QNX_TARGET)
USE_ROOT_qnx4		:= /usr/qnx4
USE_ROOT_qnx4_gcc	:= /usr/qnx4 # these will disappear
USE_ROOT_qnx4_mcc	:= /usr/mcc # these will disappear
USE_ROOT_win32		:= /usr/win32
USE_ROOT_mingw32	:= /usr/mingw32
USE_ROOT_solaris	:= /opt/QNXsdk/target/solaris

MKFILES_ROOT := $(USE_ROOT_nto)/usr/include/mk

#
# The MG_HOST utilty is to "mark generated" any file that you'd normally
# consider a source file (something with a .c, .s, etc. extension),
# but is actually generated by a program. E.g., the kernel call
# source files in libc. It's purely for documentation purposes. 
#
MG_HOST = /bin/true
#
# Copy a space separated list of files (possibly with wildcards) to an
# installation directory.
#
CP_HOST = /bin/cp -vfpc $(CP_HOST_OPTIONS)
#
# Create a symbolic link.
#
LN_HOST = /bin/ln -sf $(LN_HOST_OPTIONS)
#
# Delete a space separated list of files (possibly with wildcards).
#
RM_HOST = /bin/rm -f $(RM_HOST_OPTIONS)
#
# Create an empty file
#
TOUCH_HOST = /usr/bin/touch
#
# Print the full path of the current working directory to standard output.
#
PWD_HOST = /bin/pwd
#
# Generate a space separated list of files in a directory tree, ignoring
# anything in a CVS or RCS directory.
#
FL_HOST = $(MKFILES_ROOT)/flist-unix
#
# Generate an assembler definition file from an object file.
#
MKASMOFF_HOST = /usr/bin/mkasmoff 
#
# Mark something as a privledged executable (setuid)
#
MP_HOST = $(MKFILES_ROOT)/makepriv-qnx

ECHO_HOST = /bin/echo
DATE_HOST = /usr/bin/date +%Y/%m/%d-%T-%Z
USER_HOST = /usr/bin/id -un
HOST_HOST = /bin/hostname

#
# CL_*	Compile and link
# CC_*	Compile C/C++ source to an object file
# AS_*	Assemble something to an object file
# AR_*  Generate an object file library (archive)
# LR_*  Link a list of objects/libraries to a relocatable object file
# LD_*  Link a list of objects/libraries to a executable/shared object
# UM_*	Add a usage message to an executable
# PB_*	Add PhAB resources to an executable using "phabbind"
#

#
# host system
#
host_target=$(if $(ORIGINAL_QNX_TARGET),export QNX_TARGET=$(ORIGINAL_QNX_TARGET);)
CL_HOST = $(host_target) $(QNX_HOST)/usr/bin/cc
CC_HOST	= $(host_target) $(QNX_HOST)/usr/bin/cc -c
AS_HOST = $(host_target) $(QNX_HOST)/usr/bin/cc -c
AR_HOST = $(host_target) $(QNX_HOST)/usr/bin/cc -a
LD_HOST = $(host_target) $(QNX_HOST)/usr/bin/cc
UM_HOST = $(QNX_HOST)/usr/bin/usemsg
PB_HOST = $(QNX_HOST)/usr/bin/phabbind


CD_nto_x86_gcc = qcc
CD_nto_ppc_gcc = qcc
CD_nto_mips_gcc = qcc
CD_nto_sh_gcc = qcc
CD_nto_arm_gcc = qcc
CD_win32_x86_gcc = qcc
COMPILER_DRIVER = $(CD_$(OS)_$(CPU)_$(COMPILER_TYPE))

dash:=-
comma:=,
gcc_ver_suffix=$(if $(GCC_VERSION),$(dash)$(GCC_VERSION))
gcc_ver_string=$(if $(GCC_VERSION),$(GCC_VERSION)$(comma))

#
# NTO X86 target 
#
CC_nto_x86_wcc = /bin/old_cc -vnto11elf -c
AS_nto_x86_wcc = /bin/old_cc -vnto11elf -c
AR_nto_x86_wcc = $(QNX_HOST)/usr/bin/ntox86-ar
LR_nto_x86_wcc = $(QNX_HOST)/usr/bin/ntox86-gcc$(gcc_ver_suffix) -r
LD_nto_x86_wcc = /bin/old_cc -vnto11elf
UM_nto_x86_wcc = $(QNX_HOST)/usr/bin/usemsg -s __USAGENTO -s __USAGE
LRPOST_nto_x86_wcc = -lc-wcc
LDPOST_nto_x86_wcc = -lc-wcc
LDBOOTSTRAP_nto_x86_wcc = $(QNX_HOST)/usr/bin/ldbootstrap -Bstatic -u_start -zsegrel
LDBOOTSTRAPPOST_nto_x86_wcc = -L$(USE_ROOT_nto)/x86/lib -lc-wcc

CC_nto_x86_gcc = $(QNX_HOST)/usr/bin/ntox86-gcc$(gcc_ver_suffix) 
AS_nto_x86_gcc = $(QNX_HOST)/usr/bin/ntox86-gcc$(gcc_ver_suffix) 
AR_nto_x86_gcc = $(QNX_HOST)/usr/bin/ntox86-ar
LR_nto_x86_gcc = $(QNX_HOST)/usr/bin/ntox86-gcc$(gcc_ver_suffix) -r
LD_nto_x86_gcc = $(QNX_HOST)/usr/bin/ntox86-gcc$(gcc_ver_suffix) 
UM_nto_x86_gcc = $(QNX_HOST)/usr/bin/usemsg -s __USAGENTO -s __USAGE
OC_nto_x86_gcc = $(QNX_HOST)/usr/bin/ntox86-objcopy
LDBOOTSTRAP_nto_x86_gcc = $(QNX_HOST)/bin/ldbootstrap -Bstatic -u_start -zsegrel
LDBOOTSTRAPPOST_nto_x86_gcc = -L$(USE_ROOT_nto)/x86/lib -lc $(shell $(CC_nto_x86_gcc) -print-libgcc-file-name)

CC_nto_x86_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntox86 -c
AS_nto_x86_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntox86 -c
LR_nto_x86_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntox86 -r
LD_nto_x86_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntox86
AR_nto_x86_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntox86 -a
UM_nto_x86_gcc_qcc = $(UM_nto_x86_gcc)
OC_nto_x86_gcc_qcc = $(OC_nto_x86_gcc)
LDBOOTSTRAP_nto_x86_gcc_qcc = $(QNX_HOST)/usr/bin/ldbootstrap -Bstatic -u_start -z segrel
LDBOOTSTRAPPOST_nto_x86_gcc_qcc = $(LDBOOTSTRAPPOST_nto_x86_gcc)
#
# NTO MIPS target 
#
CC_nto_mips_gcc = $(QNX_HOST)/usr/bin/ntomips-gcc$(gcc_ver_suffix) -c
AS_nto_mips_gcc = $(QNX_HOST)/usr/bin/ntomips-gcc$(gcc_ver_suffix) -c
AR_nto_mips_gcc = $(QNX_HOST)/usr/bin/ntomips-ar
LR_nto_mips_gcc = $(QNX_HOST)/usr/bin/ntomips-gcc$(gcc_ver_suffix) -r
LD_nto_mips_gcc = $(QNX_HOST)/usr/bin/ntomips-gcc$(gcc_ver_suffix) 
UM_nto_mips_gcc = $(QNX_HOST)/usr/bin/usemsg -s __USAGENTO -s __USAGE
OC_nto_mips_gcc = $(QNX_HOST)/usr/bin/ntomips-objcopy

CC_nto_mips_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntomips -c
AS_nto_mips_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntomips -c
LR_nto_mips_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntomips -r 
LD_nto_mips_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntomips
AR_nto_mips_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntomips -a
UM_nto_mips_gcc_qcc = $(UM_nto_mips_gcc)
OC_nto_mips_gcc_qcc = $(OC_nto_mips_gcc)

#
# NTO PPC target 
#
CC_nto_ppc_gcc = $(QNX_HOST)/usr/bin/ntoppc-gcc$(gcc_ver_suffix) -c
AS_nto_ppc_gcc = $(QNX_HOST)/usr/bin/ntoppc-gcc$(gcc_ver_suffix) -c
AR_nto_ppc_gcc = $(QNX_HOST)/usr/bin/ntoppc-ar
LR_nto_ppc_gcc = $(QNX_HOST)/usr/bin/ntoppc-gcc$(gcc_ver_suffix) -r
LD_nto_ppc_gcc = $(QNX_HOST)/usr/bin/ntoppc-gcc$(gcc_ver_suffix) 
UM_nto_ppc_gcc = $(QNX_HOST)/usr/bin/usemsg -s __USAGENTO -s __USAGE
OC_nto_ppc_gcc = $(QNX_HOST)/usr/bin/ntoppc-objcopy

CC_nto_ppc_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoppc -c
AS_nto_ppc_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoppc -c
LR_nto_ppc_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoppc -r
LD_nto_ppc_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoppc
AR_nto_ppc_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoppc -a
UM_nto_ppc_gcc_qcc = $(UM_nto_ppc_gcc)
OC_nto_ppc_gcc_qcc = $(OC_nto_ppc_gcc)

#
# NTO SH target 
#
CC_nto_sh_gcc = $(QNX_HOST)/usr/bin/ntosh-gcc$(gcc_ver_suffix) -c
AS_nto_sh_gcc = $(QNX_HOST)/usr/bin/ntosh-gcc$(gcc_ver_suffix) -c
AR_nto_sh_gcc = $(QNX_HOST)/usr/bin/ntosh-ar
LR_nto_sh_gcc = $(QNX_HOST)/usr/bin/ntosh-gcc$(gcc_ver_suffix) -r
LD_nto_sh_gcc = $(QNX_HOST)/usr/bin/ntosh-gcc$(gcc_ver_suffix) 
UM_nto_sh_gcc = $(QNX_HOST)/usr/bin/usemsg -s __USAGENTO -s __USAGE
OC_nto_sh_gcc = $(QNX_HOST)/usr/bin/ntosh-objcopy

CC_nto_sh_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntosh -c
AS_nto_sh_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntosh -c
LR_nto_sh_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntosh -r
LD_nto_sh_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntosh 
AR_nto_sh_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntosh -a
UM_nto_sh_gcc_qcc = $(UM_nto_sh_gcc)
OC_nto_sh_gcc_qcc = $(OC_nto_sh_gcc)

#
# NTO ARM target 
#
CC_nto_arm_gcc = $(QNX_HOST)/usr/bin/ntoarm-gcc$(gcc_ver_suffix) -c
AS_nto_arm_gcc = $(QNX_HOST)/usr/bin/ntoarm-gcc$(gcc_ver_suffix) -c
AR_nto_arm_gcc = $(QNX_HOST)/usr/bin/ntoarm-ar
LR_nto_arm_gcc = $(QNX_HOST)/usr/bin/ntoarm-gcc$(gcc_ver_suffix) -r
LD_nto_arm_gcc = $(QNX_HOST)/usr/bin/ntoarm-gcc$(gcc_ver_suffix)
UM_nto_arm_gcc = $(QNX_HOST)/usr/bin/usemsg -s __USAGENTO -s __USAGE
OC_nto_arm_gcc = $(QNX_HOST)/usr/bin/ntoarm-objcopy

CC_nto_arm_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoarm -c
AS_nto_arm_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoarm -c
LR_nto_arm_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoarm -r
LD_nto_arm_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoarm
AR_nto_arm_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoarm -a
UM_nto_arm_gcc_qcc = $(UM_nto_arm_gcc)
OC_nto_arm_gcc_qcc = $(OC_nto_arm_gcc)

# NTO ARMv7 target
#
CC_nto_arm_gcc_v7 = $(QNX_HOST)/usr/bin/ntoarmv7-gcc$(gcc_ver_suffix) -c
AS_nto_arm_gcc_v7 = $(QNX_HOST)/usr/bin/ntoarmv7-gcc$(gcc_ver_suffix) -c
AR_nto_arm_gcc_v7 = $(QNX_HOST)/usr/bin/ntoarmv7-ar
LR_nto_arm_gcc_v7 = $(QNX_HOST)/usr/bin/ntoarmv7-gcc$(gcc_ver_suffix) -r
LD_nto_arm_gcc_v7 = $(QNX_HOST)/usr/bin/ntoarmv7-gcc$(gcc_ver_suffix)
UM_nto_arm_gcc_v7 = $(UM_HOST) -s __USAGENTO -s __USAGE
OC_nto_arm_gcc_v7 = $(QNX_HOST)/usr/bin/ntoarmv7-objcopy

CC_nto_arm_gcc_qcc_v7 = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoarmv7 -c
AS_nto_arm_gcc_qcc_v7 = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoarmv7 -c
LR_nto_arm_gcc_qcc_v7 = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoarmv7 -r
LD_nto_arm_gcc_qcc_v7 = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoarmv7
AR_nto_arm_gcc_qcc_v7 = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_ntoarmv7 -a
UM_nto_arm_gcc_qcc_v7 = $(UM_nto_arm_gcc_v7)
OC_nto_arm_gcc_qcc_v7 = $(OC_nto_arm_gcc_v7)

#
# QNX4 X86 target 
#
CC_qnx4_x86_wcc = /bin/old_cc -c
AS_qnx4_x86_wcc = /bin/old_cc -c
AR_qnx4_x86_wcc = /bin/old_cc -A
LD_qnx4_x86_wcc = /bin/old_cc 
UM_qnx4_x86_wcc = $(QNX_HOST)/usr/bin/usemsg

#
# QNX4 x86 gcc
#
CC_qnx4_x86_gcc = $(QNX_HOST)/usr/bin/qcc -c
AS_qnx4_x86_gcc = $(QNX_HOST)/usr/bin/qcc -c
AR_qnx4_x86_gcc = $(QNX_HOST)/usr/bin/qcc -a
LD_qnx4_x86_gcc = $(QNX_HOST)/usr/bin/qcc 
UM_qnx4_x86_gcc = $(QNX_HOST)/bin/echo

#
# QNX4 x86 metrowerks
#
CC_qnx4_x86_mcc = $(QNX_HOST)/usr/bin/qcc -Vmwcc_qnx4 -c
AS_qnx4_x86_mcc = $(QNX_HOST)/usr/bin/qcc -Vmwcc_qnx4 -c
AR_qnx4_x86_mcc = $(QNX_HOST)/usr/bin/qcc -Vmwcc_qnx4 -a
LD_qnx4_x86_mcc = $(QNX_HOST)/usr/bin/qcc -Vmwcc_qnx4 
UM_qnx4_x86_mcc = $(QNX_HOST)/bin/echo

#
# Solaris x86 target 
#
CC_solaris_x86_gcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_solx86 -c
AS_solaris_x86_gcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_solx86 -c
AR_solaris_x86_gcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_solx86 -a
LD_solaris_x86_gcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_solx86

#
# Solaris sparc target 
#
CC_solaris_sparc_gcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_solsparc -c
AS_solaris_sparc_gcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_solsparc -c
AR_solaris_sparc_gcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_solsparc -a
LD_solaris_sparc_gcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_solsparc

#
# Win32 X86 target 
#
CC_win32_x86_wcc = $(QNX_HOST)/usr/bin/cc -vtxtnt -c
AS_win32_x86_wcc = $(QNX_HOST)/usr/bin/cc -vtxtnt -c
AR_win32_x86_wcc = $(QNX_HOST)/usr/bin/cc -A
LD_win32_x86_wcc = $(QNX_HOST)/usr/bin/cc -vtxtnt
UM_win32_x86_wcc = $(QNX_HOST)/bin/true

CC_win32_x86_gcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_mingw -c
AS_win32_x86_gcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_mingw -c
AR_win32_x86_gcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_mingw -a
LD_win32_x86_gcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_mingw
UM_win32_x86_gcc = $(QNX_HOST)/bin/true

CC_win32_x86_gcc_gcc = gcc -c 
AS_win32_x86_gcc_gcc = gcc -c 
LR_win32_x86_gcc_gcc = gcc -r
LD_win32_x86_gcc_gcc = gcc
AR_win32_x86_gcc_gcc = $(QNX_HOST)/usr/bin/ntox86-ar

CC_win32_x86_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_cygwin -c
AS_win32_x86_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_cygwin -c
LR_win32_x86_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_cygwin -r
LD_win32_x86_gcc_qcc = $(QNX_HOST)/usr/bin/qcc -V$(gcc_ver_string)gcc_cygwin
AR_win32_x86_gcc_qcc = $(AR_win32_x86_gcc_gcc)

ifndef QCONF_OVERRIDE

CWD := $(shell $(PWD_HOST))
roots:=$(filter $(ROOT_DIR) cvs src qssl, $(subst /, ,$(CWD)))
ifneq ($(roots),)
root:=$(word $(words $(roots)), $(roots))
src_root := $(patsubst %/,%,$(subst !,/,$(dir $(subst !$(root)!,!$(root)/, $(subst /,!, $(CWD))))))
QCONF_OVERRIDE=$(src_root)/qconf-override.mk
endif
endif
ifneq ($(QCONF_OVERRIDE),)
-include $(QCONF_OVERRIDE)
endif
