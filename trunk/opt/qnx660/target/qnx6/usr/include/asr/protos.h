/**
 * @file protos.h
 *
 * @brief Functions for module logging
 *
 * @details The @c protos.h header file provides functions for logging.
 */

#ifndef _ASR_PROTOS_H
#define _ASR_PROTOS_H

#include "asr/types.h"
#include "asr/cfg.h"
#include "asr/asrv.h"
#include "asr/asra.h"
#include "asr/asrp.h"
#include "asr/asrm.h"
#include "asr/asr.h"


#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Helper function used to generate log messages
 *
 * The @e %logmsg() function sends debugging information with an
 * associated severity to the appropriate log. The log where the data
 * is actually sent is specified by the global variable @c log_stdout. 
 * If this variable is nonzero, output generated by this
 * function is printed to the system log.
 *
 * Log messages are written to the log buffer only if their
 * severity is less than or equal to the current verbosity setting.
 *
 * NOTE: If the severity of the log message is critical, the program
 * is aborted. If the severity of the log message is @c _SLOG_ERROR,
 * the program exits with a failure status.
 *
 * @param severity The severity of the condition that triggered the message. 
 * For more information on severity levels, see @e slogf() in the <em>QNX C Library Reference</em>.
 * Valid values include:
 * - @c _SLOG_INFO
 * - @c _SLOG_WARN
 * - @c _SLOG_ERROR
 * - @c _SLOG_CRITICAL
 *
 * @param fmt The format string to print to the log buffer. This may
 *      include tokens to be replaced by values of variable
 *      arguments appended to the end of the call. The max length
 *      of an expanded log message is 1024 characters (this includes
 *      all format substitutions and the null terminator).
 *
 * @return 0 on success.
 * @return -1 on error.
 */
int logmsg(int severity, const char *fmt, ...) __attribute__((format(printf, 2, 3)));

/**
 * @brief Send a recognition result to the log
 * @details The @e %logresult() function writes details about the specified result to the log. The specified
 *          severity must be less than the ASR global severity level.
 * @param severity The severity of the current result to be logged.
 * @param result A pointer to the recognition result to examine.
 * @return Nothing.
 */
void logresult(const int severity, const asr_result_t *result);

#ifdef __cplusplus
}
#endif

#endif

#if defined(__QNXNTO__) && defined(__USESRCVERSION)
#include <sys/srcversion.h>
__SRCVERSION("$URL: http://svn/product/branches/6.6.0/trunk/services/asr/core/public/asr/protos.h $ $Rev: 730767 $")
#endif
