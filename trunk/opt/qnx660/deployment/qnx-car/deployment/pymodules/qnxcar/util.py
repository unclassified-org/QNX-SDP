import qnxcar.timeutil as _timeutil
import sys as _sys

_appname = None

class Key(object):
	def __init__(s, key): s.key = key
	def __repr__(s): return '<key 0x%x %r>' % (id(s), s.key)

def limit_kwargs(d, *argnames):
	for k in d:
		if not k in argnames:
			raise TypeError("unexpected keyword argument %r" % (k,))

def get_appname(default='<unknown_python_script>'):
	if _appname is not None:
		return _appname
	elif _sys.argv:
		return _sys.argv[0]
	else:
		return default

def write_autogen_header(file=None):
	timestr = _timeutil.datetime_local().isoformat()
	print >> file, '# auto-generated by %s' % (get_appname(),)
	print >> file, '#  at %s'  % (timestr,)

class MsgPrinter(object):
	"""A callable object that prints any message below its verbosity limit.

Usage example:
m = MsgPrinter(verbosity=5, file=sys.stderr)
m(3, 'hello world')  # printed
m(7, 'too verbose')  # not printed"""
	
	def __init__(self, verbosity=0, file=None):
		self.verbosity = verbosity
		self.file = file
	
	def _writeln(self, text):
		print >> self.file, text
	def _writelns(self, lines):
		for text in lines:
			self._writeln(text)
	
	def printline(self, level, text):
		if level <= self.verbosity:
			self._writeln(text)
	
	def __call__(self, *v, **kw):
		return self.printline(*v, **kw)
	
	def printlines(self, level, lines):
		if level <= self.verbosity:
			self._writelns(lines)
	
	def printfn(self, level, fn):
		if level <= self.verbosity:
			self._writelns(fn())
