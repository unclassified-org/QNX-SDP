{
  "name": "data2xml",
  "description": "A data to XML converter with a nice interface (for NodeJS).",
  "version": "0.4.0",
  "author": {
    "name": "Andrew Chilton",
    "email": "chilts@appsattic.com",
    "url": "http://www.appsattic.com/"
  },
  "homepage": "https://github.com/appsattic/node-data2xml",
  "contributors": [],
  "devDependencies": {
    "tap": ">= 0.0.11"
  },
  "dependencies": {},
  "main": "data2xml.js",
  "directories": {},
  "engines": {
    "node": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/appsattic/node-data2xml.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/appsattic/node-data2xml/raw/master/LICENSE"
    }
  ],
  "keywords": [
    "data",
    "xml",
    "data2xml",
    "datatoxml",
    "js2xml",
    "jstoxml",
    "json2xml",
    "jsontoxml"
  ],
  "scripts": {
    "test": "./node_modules/tap/bin/tap.js test/*.js"
  },
  "readme": "data2xml is a data to XML converter with a nice interface (for NodeJS).\n\nInstallation\n------------\n\nThe easiest way to get it is via npm:\n\n    npm install data2xml\n\nInfo and Links:\n\n* npm info data2xml\n* http://search.npmjs.org/#/data2xml\n* https://github.com/appsattic/node-data2xml/\n\nExamples\n--------\n\nNote: in each example, I am leaving out the XML declaration. I am also pretty printing the output - the package doesn't\ndo this for you!\n\n    var data2xml = require('data2xml');\n\n    data2xml('TopLevelElement', {\n        _attr : { xmlns : 'http://appsattic.com/xml/namespace' }\n        SimpleElement : 'A simple element',\n        ComplexElement : {\n            A : 'Value A',\n            B : 'Value B',\n        },\n    });\n\n    =>\n\n    <TopLevelLement xmlns=\"http://appsattic.com/xml/namespace\">\n        <SimpleElement>A simple element</SimpleElement>\n        <ComplexElement>\n            <A>Value A</A>\n            <B>Value B</B>\n        </ComplexElement>\n    </TopLevelLement>\n\nLet's try some attributes on other elements:\n\n\nIf you want an element containing data you can do it one of two ways. A simple piece of data will work, but if you want\nattributes you need to specify the value in the element object:\n\n    data2xml('TopLevelElement', {\n        SimpleData : 'Simple Value',\n        ComplexData : {\n            _attr : { type : 'colour' },\n            _value : 'White',\n        }\n    });\n\n    =>\n\n    <TopLevelLement xmlns=\"http://appsattic.com/xml/namespace\">\n        <SimpleData>Simple Value</SimpleData>\n        <ComplexData type=\"color\">White</ComplexData>\n    </TopLevelLement>\n\nIf you want an array, just put one in there:\n\n    data2xml('TopLevelElement', {\n        MyArray : [\n            'Simple Value',\n            {\n                _attr : { type : 'colour' },\n                _value : 'White',\n            }\n        ],\n    });\n\n    =>\n\n    <TopLevelLement xmlns=\"http://appsattic.com/xml/namespace\">\n        <MyArray>Simple Value</MyArray>\n        <MyArray type=\"color\">White</MyArray>\n    </TopLevelLement>\n\nWhy data2xml\n------------\n\nLooking at the XML modules out there I found that the data structure I had to create to get some XML out of the other\nend was not very nice, nor very easy to create. This module is designed so that you can take any plain old data\nstructure in one end and get an XML representation out of the other.\n\nIn some cases you need to do something a little special (rather than a lot special) but these are for slightly more\ntricky XML representations.\n\nAlso, I wanted a really simple way to convert data structures in NodeJS into an XML representation for the Amazon Web\nServices within node-awssum. This seemed to be the nicest way to do it (after trying the other js to xml modules).\n\nWhat data2xml does\n------------------\n\ndata2xml converts data structures into XML. It's that simple. No need to worry!\n\nWhat data2xml doesn't do\n------------------------\n\nData2Xml is designed to be an easy way to get from a data structure to XML. Various other JavaScript to XML modules try\nand do everything which means that the interface is pretty dire. If you just want an easy way to get XML using a sane\ndata structure, then this module is for you.\n\nTo decide this, you need to know what this module doesn't do. It doesn't deal with:\n\n* mixed type elements (such as <markup>Hello <strongly>World</strongly></markup>)\n* pretty formatting - after all, you're probably sending this XML to another machine\n* CDATA elements ... though I probably _should_ add this (somehow)\n* data objects which are (or have) functions\n* ordered elements - if you pass me an object, it's members will be output in an order defined by 'for m in object'\n* comments\n* processing instructions\n* entity references\n* all the other stuff you don't care about when dealing with data\n\n(Ends)\n",
  "readmeFilename": "README.md",
  "_id": "data2xml@0.4.0",
  "bundleDependencies": [],
  "_from": "data2xml@0.4.0"
}
